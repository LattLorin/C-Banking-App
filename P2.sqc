/* P2
 * Section 5
 * 006152874
 * Renteria, Carlos
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sqlenv.h>
#include <sqlutil.h>
//#include "utilemb.h"

EXEC SQL BEGIN DECLARE SECTION;
  char custTable[128];
  char accTable[128];
  char schemaName[128];
  char columnName[128];
  sqlint32 dataType;

  sqlint32 custId;
  char custName[15];
  char custGender[1];
  sqlint32 custAge;
  sqlint32 custPin;

  sqlint32 totalBal;
  sqlint32 accNum;
  sqlint32 balance;

  sqlint32 accNum;
  sqlint32 accBal;
  sqlint32 accType;
  sqlint32 accStat;

  sqlint32 dataLength;
  short dataScale;
  char dbAlias[15];
  char strstmt[512];
EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE SQLCA;

int main(int argc, char *argv[]) {
  int rc = 0;
  struct sqlca sqlca;

  
  /* check the command line arguments */
  if (argc < 2) {
//    printf("Usage sample2 dbAlias, userId, password");
    printf("Usage sample2 dbAlias");
  } else {
    strcpy(dbAlias, argv[1]);
//    strcpy(user, argv[2]);
//    strcpy(pswd, argv[3]);

/*     EXEC SQL CONNECT TO :dbAlias USER :user USING :pswd; */
    EXEC SQL CONNECT TO :dbAlias;

    strcpy(custTable, "CUSTOMER");
    strcpy(accTable, "ACCOUNT");
    strcpy(schemaName, "CRR");

    rc = mainScreen();
    //rc = TbColumnInfoGet();

    /* disconnect from the database */
    EXEC SQL CONNECT RESET;
  }
    return 0;
} /* end main */

int TbColumnInfoGet(void) {

  EXEC SQL DECLARE c1 CURSOR FOR
    SELECT colname, typename, length, scale
      FROM syscat.columns
      WHERE tabschema = :schemaName AND tabname = :custTable;

  EXEC SQL OPEN c1;

  EXEC SQL FETCH c1 INTO :columnName, :dataType, :dataLength, :dataScale;

  if (sqlca.sqlcode == 100)
  {
    printf("\n  Data not found.\n");
  }

  while (sqlca.sqlcode != 100)
  {
    printf("    %-20.20s %-14.14s %d", columnName, dataType, dataLength);
    if (dataScale != 0)
    {
      printf(",%d\n", dataScale);
    }
    else
    {
      printf("\n");
    }

    EXEC SQL FETCH c1 INTO :columnName, :dataType, :dataLength, :dataScale;
  }

  EXEC SQL CLOSE c1;

  return 0;
} /* TbColumnInfoGet */

int opt;

int mainScreen(void) {
  int done = 1;
  while (done) {
    printf("\nWelcome to the Self Service Banking System!");
    printf("\n1. New Customer");
    printf("\n2. Customer Login");
    printf("\n3. Exit\n");
      /*Get user input*/
    scanf("%d", &opt);
    //int id = -1;
    switch (opt) {
      case 1:
        //Prompt for Name Gender Age and Pin, return Id if successful
        printf("Name: ");
        scanf("%s", &custName);//Name
        int correct = 1;
        while (correct) {
          printf("Gender (M/F): ");
          scanf("%s", &custGender);//Gendr
          if ((strncmp(custGender, "M", 10) == 0) || (strncmp(custGender, "F", 10) == 0)) {correct = 0;}
          else {printf("Incorrect input %s\n", custGender);}
        }
        correct = 1;
        while (correct) {
          printf("Age: ");
          scanf("%d", &custAge);//Age
          if (custAge > 0) {correct = 0;}
          else {printf("Invalid age must be greater than 0\n");}
        }
        correct = 1;
        while (correct) {
          printf("Pin: ");
          scanf("%d", &custPin);//Pin
          if (custPin > 0) {correct = 0;}
          else {printf("Invalid pin: must be greater than 0\n");}
        }
        //Do db call with an insert then return id
        custId = newCust();
        printf("\nYOUR ID IS: %d\n", custId);
        break;
      case 2:
        //Prompt for customer ID and pin to authenticate,
        //if customer enters 0 for ID and pin go to screen #4
        printf("ID: ");
        scanf("%d", &custId);

        printf("Pin: ");
        scanf("%d", &custPin);
        if (custId == 0 && custPin == 0) {
          adminLogin();
        }
        //else if (authenticated(custId, custPin, stmt)) {
        //  customerScreen(custId, custPin, stmt);
        //} else {
        //  printf("WRONG ID OR PIN.");
        //}
        break;
      case 3:
        //Exit
        done = 0;
        break;
      default:
        printf("Please choose a valid option (1, 2, or 3).");
        break;
    }
  }
  return 0;
}

int newCust () {
  int rc = 0;

  EXEC SQL INSERT INTO CUSTOMER (NAME, GENDER, AGE, PIN) 
  VALUES (:custName, :custGender, :custAge, :custPin);

  //printf("Commited %s, %s, %d, %d\n", custName, custGender, custAge, custPin);

  EXEC SQL DECLARE c2 CURSOR FOR
    SELECT id
    FROM customer
    WHERE name = :custName AND pin = :custPin;

  EXEC SQL OPEN c2;
  EXEC SQL FETCH c2 INTO :custId;
  EXEC SQL CLOSE c2;
  
  return custId;
}

int adminLogin() {
  int done = 1;
  int id = -1;
  while (done) {
    printf("Administrator Main Menu");
    printf("\n1. Account Summary for a Customer");
    printf("\n2. Report A :: Customer Information with Total Balance in Decreasing Order");
    printf("\n3. Report B :: Find the Average Total Balance Between Age Groups");
    printf("\n4. Exit\n");
    
    scanf("%d", &opt);
    switch (opt) {
      case 1:
        //Get account summary for a customer, provide a customer id
        printf("ID: ");
        scanf("%d", &id);
        accSummary(id);
        break;
      case 2:
        //You would display customer Id, Name, age, gender and total balance
        //System.out.print("ID: ");
        //id = in.nextInt();
        //custInfo(stmt);//id, stmt);
        break;
      case 3: 
        //Find average total balance between age groups
        /*int minAge, maxAge;
        printf("Min age: ");
        scanf("%d", &minAge);
        printf("Max age: ");
        scanf("%d", &maxAge);
        avgTotalBal(minAge, maxAge);*/
        break;
      case 4:
        //Exit
        done = 0;
        break;
      default:
        printf("Please choose a valid option (1, 2, 3, or 4).\n");
      }
    }
    return 0;
}

int accSummary(int anId) {
  custId = anId;
  EXEC SQL SELECT sum(balance) INTO :totalBal
    FROM account
    WHERE id = :custId;

  printf("TOTAL BALANCE\tACCOUNT\tBALANCE\n");

  EXEC SQL DECLARE c3 CURSOR FOR
  SELECT NUMBER, BALANCE
  FROM ACCOUNT
  WHERE ID = :custId AND STATUS = 'A';

  EXEC SQL OPEN c3;
  printf("%d",totalBal);
  while (1) {
        EXEC SQL FETCH c3 INTO :accNum, :balance;
        if (SQLCODE != 0) break;
         printf("\t\t%d\t%d\n", accNum, balance);
  }
  EXEC SQL CLOSE c3;
}