/* P2
 * Section 5
 * 006152874
 * Renteria, Carlos
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sqlenv.h>
#include <sqlutil.h>
// #include "utilemb.h"

int TbSchemaNameGet(void);
int TbColumnInfoGet(void);

EXEC SQL BEGIN DECLARE SECTION;
  char custTable[128];
  char accTable[128];
  char schemaName[128];
  char columnName[20];
  char dataType[14];
  sqlint32 dataLength;
  short dataScale;
  char dbAlias[15];
  char user[129];
  char pswd[15];
EXEC SQL END DECLARE SECTION;

int main(int argc, char *argv[])
{
  int rc = 0;
  struct sqlca sqlca;

  
  /* check the command line arguments */
  if (argc < 2) {
//    printf("Usage sample2 dbAlias, userId, password");
    printf("Usage sample2 dbAlias");
  } else {
    strcpy(dbAlias, argv[1]);
//    strcpy(user, argv[2]);
//    strcpy(pswd, argv[3]);

/*     EXEC SQL CONNECT TO :dbAlias USER :user USING :pswd; */
    EXEC SQL CONNECT TO :dbAlias;

    strcpy(custTable, "CUSTOMER");
    strcpy(accTable, "ACCOUNT");

    rc = TbSchemaNameGet();
    rc = TbColumnInfoGet();

    /* disconnect from the database */
    EXEC SQL CONNECT RESET;
  }
    return 0;
} /* end main */

int TbSchemaNameGet(void) {
  struct sqlca sqlca;

  printf("\n-----------------------------------------------------------");
  printf("\nUSE THE SQL STATEMENT:\n");
  printf("  SELECT INTO\n");
  printf("TO GET A TABLE SCHEMA NAME.\n");

  /* get the table schema name */
  printf("\n  Execute the statement\n");
  printf("    SELECT tabschema INTO :schemaName\n");
  printf("      FROM syscat.tables\n");
  printf("      WHERE tabname = :custTable\n");
  printf("  for\n");
  printf("    tableName = '%s'.\n", custTable);

  EXEC SQL SELECT tabschema INTO :schemaName
    FROM syscat.tables
    WHERE tabname = :custTable;
/*  EMB_SQL_CHECK("Table schema name -- Get"); */

  /* get rid of spaces from the end of schemaName */
  strtok(schemaName, " ");

  printf("\nTable schema name is: %s\n", schemaName);

  return 0;
}

int TbColumnInfoGet(void) {
  struct sqlca sqlca;

  printf("\n-----------------------------------------------------------");
  printf("\nUSE THE SQL STATEMENTS:\n");
  printf("  DECLARE CURSOR\n");
  printf("  OPEN\n");
  printf("  FETCH\n");
  printf("  CLOSE\n");
  printf("TO GET TABLE COLUMN INFO.\n");

  /* get info for table columns */
  printf("\n  Get info for '%s.%s' table columns:\n",
         schemaName, custTable);
  printf("\n    column name          data type      data size\n");
  printf("    -------------------- -------------- ----------\n");

  EXEC SQL DECLARE c1 CURSOR FOR
    SELECT colname, typename, length, scale
      FROM syscat.columns
      WHERE tabschema = :schemaName AND tabname = :custTable;

  EXEC SQL OPEN c1;
  /* EMB_SQL_CHECK("Cursor -- Open"); */

  EXEC SQL FETCH c1 INTO :columnName, :dataType, :dataLength, :dataScale;
  /* EMB_SQL_CHECK("Cursor -- Fetch"); */

  if (sqlca.sqlcode == 100)
  {
    printf("\n  Data not found.\n");
  }

  while (sqlca.sqlcode != 100)
  {
    printf("    %-20.20s %-14.14s %d", columnName, dataType, dataLength);
    if (dataScale != 0)
    {
      printf(",%d\n", dataScale);
    }
    else
    {
      printf("\n");
    }

    EXEC SQL FETCH c1 INTO :columnName, :dataType, :dataLength, :dataScale;
    /* EMB_SQL_CHECK("Cursor -- Fetch"); */
  }

  EXEC SQL CLOSE c1;
  /* EMB_SQL_CHECK("Cursor -- Close"); */

  return 0;
} /* TbColumnInfoGet */
